package leetcodepractice;
import java.util.Arrays;

public class LeetCode149
{
   interface MyInterface
   {
      double applyAbs(double a);
   }

   MyInterface abs = a -> a > 0 ? a : a * (-1);

   private double operator(MyInterface operator, double val)
   {
      return operator.applyAbs(val);
   }

   public int maxPoints(int[][] points)
   {
      int totalPoints = points.length;
      Arrays.sort(points, (arr1, arr2) -> arr1[0] - arr2[0]);
      if (totalPoints == 1)
         return 1;
      if (totalPoints == 2)
         return 2;

      int maxCount = 0;
      for (int i = 0; i < totalPoints - 2; i++)
      {
         int x = points[i][0];
         int y = points[i][1];
         boolean isthereWasSamePoint = false;
         for (int k = i + 1; k < totalPoints; k++)
         {
            int x1 = points[k][0];
            int y1 = points[k][1];
            double slop = 0;
            int count = 2;
            if (isthereWasSamePoint)
               count++;
            boolean isVerticalLine = false;
            boolean isSamePoint = false;
            if (x1 == x)
            {
               isVerticalLine = true;
               if (y1 == y)
               {
                  isSamePoint = true;
                  isthereWasSamePoint = true;
               }
            }
            else
            {
               slop = ((double) (y1 - y) / (double) (x1 - x));
            }
            for (int j = k + 1; j < totalPoints; j++)
            {
               int x2 = points[j][0];
               int y2 = points[j][1];

               if (x2 == x1)
               {
                  if (isVerticalLine || y2 == y1)
                     count = count + 1;
                  continue;
               }
               else
               {
                  if (isVerticalLine)
                  {
                     if (count > 2)
                        break;
                  }
                  // isVerticalLine = false;
                  double slop1 = (double) (y2 - y1) / (double) (x2 - x1);
                  if (slop == slop1)
                  {
                     count = count + 1;
                  }
                  else
                  {
                     if (isSamePoint)
                     {
                        count = count + 1;
                        slop = slop1;
                        isSamePoint = false;
                     }
                  }
               }
            }
            if (count > maxCount)
            {
               System.out.println("-----------------------=-------------------------");
               System.out
                     .println("X pint: " + x + " y point is : " + y + " x1 point is : " + x1 + " y1 point is: " + y1);
               System.out.println("Count is " + count);
               maxCount = count;
            }
         }
      }
      return maxCount;
   }

   public static void main(String[] args)
   {
      // int[][] arr = { { 15, 12 }, { 9, 10 }, { -16, 3 }, { -15, 15 }, { 11, -10 }, { -5, 20 }, { -3, -15 }, { -11, -8
      // },
      // { -8, -3 }, { 3, 6 }, { 15, -14 }, { -16, -18 }, { -6, -8 }, { 14, 9 }, { -1, -7 }, { -1, -2 }, { 3, 11 },
      // { 6, 20 }, { 10, -7 }, { 0, 14 }, { 19, -18 }, { -10, -15 }, { -17, -1 }, { 8, 7 }, { 20, -18 }, { -4, -9 },
      // { -9, 16 }, { 10, 14 }, { -14, -15 }, { -2, -10 }, { -18, 9 }, { 7, -5 }, { -12, 11 }, { -17, -6 },
      // { 5, -17 }, { -2, -20 }, { 15, -2 }, { -5, -16 }, { 1, -20 }, { 19, -12 }, { -14, -1 }, { 18, 10 },
      // { 1, -20 }, { -15, 19 }, { -18, 13 }, { 13, -3 }, { -16, -17 }, { 1, 0 }, { 20, -18 }, { 7, 19 }, { 1, -6 },
      // { -7, -11 }, { 7, 1 }, { -15, 12 }, { -1, 7 }, { -3, -13 }, { -11, 2 }, { -17, -5 }, { -12, -14 },
      // { 15, -3 }, { 15, -11 }, { 7, 3 }, { 19, 7 }, { -15, 19 }, { 10, -14 }, { -14, 5 }, { 0, -1 }, { -12, -4 },
      // { 4, 18 }, { 7, -3 }, { -5, -3 }, { 1, -11 }, { 1, -1 }, { 2, 16 }, { 6, -6 }, { -17, 9 }, { 14, 3 },
      // { -13, 8 }, { -9, 14 }, { -5, -1 }, { -18, -17 }, { 9, -10 }, { 19, 19 }, { 16, 7 }, { 3, 7 }, { -18, -12 },
      // { -11, 12 }, { -15, 20 }, { -3, 4 }, { -18, 1 }, { 13, 17 }, { -16, -15 }, { -9, -9 }, { 15, 8 },
      // { 19, -9 }, { 9, -17 } };
      // int[][] arr = { { -240, -657 }, { -27, -188 }, { -616, -247 }, { -264, -311 }, { -352, -393 }, { -270, -748 },
      // { 3, 4 }, { -308, -87 }, { 150, 526 }, { 0, -13 }, { -7, -40 }, { -3, -10 }, { -531, -892 }, { -88, -147 },
      // { 4, -3 }, { -873, -555 }, { -582, -360 }, { -539, -207 }, { -118, -206 }, { 970, 680 }, { -231, -47 },
      // { 352, 263 }, { 510, 143 }, { 295, 480 }, { -590, -990 }, { -236, -402 }, { 308, 233 }, { -60, -111 },
      // { 462, 313 }, { -270, -748 }, { -352, -393 }, { -35, -148 }, { -7, -40 }, { 440, 345 }, { 388, 290 },
      // { 270, 890 }, { 10, -7 }, { 60, 253 }, { -531, -892 }, { 388, 290 }, { -388, -230 }, { 340, 85 },
      // { 0, -13 }, { 770, 473 }, { 0, 73 }, { 873, 615 }, { -42, -175 }, { -6, -8 }, { 49, 176 }, { 308, 222 },
      // { 170, 27 }, { -485, -295 }, { 170, 27 }, { 510, 143 }, { -18, -156 }, { -63, -316 }, { -28, -121 },
      // { 396, 304 }, { 472, 774 }, { -14, -67 }, { -5, 7 }, { -485, -295 }, { 118, 186 }, { -154, -7 },
      // { -7, -40 }, { -97, -35 }, { 4, -9 }, { -18, -156 }, { 0, -31 }, { -9, -124 }, { -300, -839 },
      // { -308, -352 }, { -425, -176 }, { -194, -100 }, { 873, 615 }, { 413, 676 }, { -90, -202 }, { 220, 140 },
      // { 77, 113 }, { -236, -402 }, { -9, -124 }, { 63, 230 }, { -255, -118 }, { 472, 774 }, { -56, -229 },
      // { 90, 228 }, { 3, -8 }, { 81, 196 }, { 970, 680 }, { 485, 355 }, { -354, -598 }, { -385, -127 }, { -2, 7 },
      // { 531, 872 }, { -680, -263 }, { -21, -94 }, { -118, -206 }, { 616, 393 }, { 291, 225 }, { -240, -657 },
      // { -5, -4 }, { 1, -2 }, { 485, 355 }, { 231, 193 }, { -88, -147 }, { -291, -165 }, { -176, -229 },
      // { 154, 153 }, { -970, -620 }, { -77, 33 }, { -60, -111 }, { 30, 162 }, { -18, -156 }, { 425, 114 },
      // { -177, -304 }, { -21, -94 }, { -10, 9 }, { -352, -393 }, { 154, 153 }, { -220, -270 }, { 44, -24 },
      // { -291, -165 }, { 0, -31 }, { 240, 799 }, { -5, -9 }, { -70, -283 }, { -176, -229 }, { 3, 8 },
      // { -679, -425 }, { -385, -127 }, { 396, 304 }, { -308, -352 }, { -595, -234 }, { 42, 149 }, { -220, -270 },
      // { 385, 273 }, { -308, -87 }, { -54, -284 }, { 680, 201 }, { -154, -7 }, { -440, -475 }, { -531, -892 },
      // { -42, -175 }, { 770, 473 }, { 118, 186 }, { -385, -127 }, { 154, 153 }, { 56, 203 }, { -616, -247 } };
      int[][] arr = { { 40, -23 }, { 9, 138 }, { 429, 115 }, { 50, -17 }, { -3, 80 }, { -10, 33 }, { 5, -21 },
            { -3, 80 }, { -6, -65 }, { -18, 26 }, { -6, -65 }, { 5, 72 }, { 0, 77 }, { -9, 86 }, { 10, -2 }, { -8, 85 },
            { 21, 130 }, { 18, -6 }, { -18, 26 }, { -1, -15 }, { 10, -2 }, { 8, 69 }, { -4, 63 }, { 0, 3 }, { -4, 40 },
            { -7, 84 }, { -8, 7 }, { 30, 154 }, { 16, -5 }, { 6, 90 }, { 18, -6 }, { 5, 77 }, { -4, 77 }, { 7, -13 },
            { -1, -45 }, { 16, -5 }, { -9, 86 }, { -16, 11 }, { -7, 84 }, { 1, 76 }, { 3, 77 }, { 10, 67 }, { 1, -37 },
            { -10, -81 }, { 4, -11 }, { -20, 13 }, { -10, 77 }, { 6, -17 }, { -27, 2 }, { -10, -81 }, { 10, -1 },
            { -9, 1 }, { -8, 43 }, { 2, 2 }, { 2, -21 }, { 3, 82 }, { 8, -1 }, { 10, -1 }, { -9, 1 }, { -12, 42 },
            { 16, -5 }, { -5, -61 }, { 20, -7 }, { 9, -35 }, { 10, 6 }, { 12, 106 }, { 5, -21 }, { -5, 82 }, { 6, 71 },
            { -15, 34 }, { -10, 87 }, { -14, -12 }, { 12, 106 }, { -5, 82 }, { -46, -45 }, { -4, 63 }, { 16, -5 },
            { 4, 1 }, { -3, -53 }, { 0, -17 }, { 9, 98 }, { -18, 26 }, { -9, 86 }, { 2, 77 }, { -2, -49 }, { 1, 76 },
            { -3, -38 }, { -8, 7 }, { -17, -37 }, { 5, 72 }, { 10, -37 }, { -4, -57 }, { -3, -53 }, { 3, 74 },
            { -3, -11 }, { -8, 7 }, { 1, 88 }, { -12, 42 }, { 1, -37 }, { 2, 77 }, { -6, 77 }, { 5, 72 }, { -4, -57 },
            { -18, -33 }, { -12, 42 }, { -9, 86 }, { 2, 77 }, { -8, 77 }, { -3, 77 }, { 9, -42 }, { 16, 41 },
            { -29, -37 }, { 0, -41 }, { -21, 18 }, { -27, -34 }, { 0, 77 }, { 3, 74 }, { -7, -69 }, { -21, 18 },
            { 27, 146 }, { -20, 13 }, { 21, 130 }, { -6, -65 }, { 14, -4 }, { 0, 3 }, { 9, -5 }, { 6, -29 }, { -2, 73 },
            { -1, -15 }, { 1, 76 }, { -4, 77 }, { 6, -29 } };

      LeetCode149 soln = new LeetCode149();
      System.out.println(soln.maxPoints(arr));
   }

}
